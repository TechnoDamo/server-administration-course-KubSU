name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docker

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --extras test

  test:
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: ./docker

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up SSH tunnel to PostgreSQL
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_GITHUB_ACTIONS }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Verify key format
          echo "Key contents start:"
          head -n 3 ~/.ssh/deploy_key
          echo "..."
          tail -n 3 ~/.ssh/deploy_key
          
          # Add server to known_hosts
          ssh-keyscan -H 212.192.134.135 >> ~/.ssh/known_hosts
          
          # Test basic SSH connection first
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no chatelet@212.192.134.135 "echo 'SSH connection successful'" || exit 1
          
          # Start tunnel with debug logging
          ssh -v -i ~/.ssh/deploy_key -N -L 5432:localhost:5432 chatelet@212.192.134.135 > ssh.log 2>&1 &
          echo $! > ssh_tunnel.pid
          sleep 10
          
          # Verify tunnel
          if ! pgrep -f "5432:localhost:5432"; then
            echo "SSH tunnel failed to start. Logs:"
            cat ssh.log
            exit 1
          fi

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Verify PostgreSQL connection
        run: |
          for i in {1..5}; do
            if pg_isready -h localhost -p 5432 -U kubsu; then
              exit 0
            fi
            sleep 2
          done
          echo "Failed to connect to PostgreSQL"
          exit 1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --extras test

      - name: Run tests
        env:
          DATABASE_URL: "postgresql://kubsu:kubsu@localhost:5432/kubsu"
        run: |
          poetry run pytest --maxfail=1 --disable-warnings -q

      - name: Clean up SSH tunnel
        if: always()
        run: |
          if [ -f ssh_tunnel.pid ]; then
            echo "Stopping SSH tunnel..."
            kill $(cat ssh_tunnel.pid) || true
            rm ssh_tunnel.pid
          fi
          rm -f ssh.log

  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: success()

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_GITHUB_ACTIONS }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H 212.192.134.135 >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no chatelet@kubsu.tyvik.ru << 'EOF'
            cd ~/tasks/docker
            git pull origin master
            docker build -t my-app .
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --network host --name my-app my-app
          EOF

  verify:
    runs-on: ubuntu-latest
    needs: [deploy]
    timeout-minutes: 5

    steps:
      - name: Verify deployment
        run: |
          for i in {1..10}; do
            if curl --silent --fail http://212.192.134.135:60080/chatelet/users/; then
              echo "Application is running successfully"
              exit 0
            fi
            sleep 10
          done
          echo "Application did not start properly"
          exit 1
